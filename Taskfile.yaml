version: '3'

vars:
  TOOL_DIR: "{{.USER_WORKING_DIR}}/bin"
  CERTS_DIR: "{{.USER_WORKING_DIR}}/certs"
  # renovate: datasource=go depName=sigs.k8s.io/controller-tools
  CONTROLLER_TOOLS_VERSION: v0.18.0
  # renovate: datasource=go depName=fybrik.io/crdoc
  CRDOC_VERSION: v0.6.4

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task --list
    silent: true

  generate-dev-certs:
    desc: Generate self-signed certificates for local webhook development
    cmds:
      - mkdir -p "{{.CERTS_DIR}}"
      - |
        set -e
        echo "Generating self-signed certificates for local development..."

        CERTS_DIR="{{.CERTS_DIR}}"

        # Generate private key
        openssl genrsa -out "$CERTS_DIR/tls.key" 2048

        # Generate certificate signing request and self-signed certificate
        # Using localhost and 127.0.0.1 for local development
        openssl req -new -x509 -key "$CERTS_DIR/tls.key" -out "$CERTS_DIR/tls.crt" -days 365 \
          -subj "/C=US/ST=Development/L=Local/O=Milo/OU=Development/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,DNS:*.localhost,IP:127.0.0.1,IP:::1"

        echo "Certificates generated in $CERTS_DIR/"
        echo "  - Private key: $CERTS_DIR/tls.key"
        echo "  - Certificate: $CERTS_DIR/tls.crt"
        echo ""
        echo "To use these certificates, run the controller manager with:"
        echo "  --tls-cert-file=$CERTS_DIR/tls.crt --tls-private-key-file=$CERTS_DIR/tls.key"
    status:
      - test -f "{{.CERTS_DIR}}/tls.key"
      - test -f "{{.CERTS_DIR}}/tls.crt"
    silent: true

  generate:
    desc: Generate code including deepcopy, objects, CRDs, and potentially protobuf marshallers
    deps:
      - task: install-go-tool
        vars:
          NAME: controller-gen
          PACKAGE: sigs.k8s.io/controller-tools/cmd/controller-gen
          VERSION: "{{.CONTROLLER_TOOLS_VERSION}}"
    cmds:
      - echo "Generating deepcopy and object files..."
      - "\"{{.TOOL_DIR}}/controller-gen\" object paths=\"./pkg/apis/...\""
      - echo "Generating CRD manifests for each package..."
      - |
        set -e
        for package_dir in pkg/apis/*/; do
          package_name=$(basename "$package_dir")
          echo "Generating CRDs for package: $package_name"
          mkdir -p "config/crd/bases/$package_name"
          "{{.TOOL_DIR}}/controller-gen" crd paths="./$package_dir..." output:dir="./config/crd/bases/$package_name"
        done
      - echo "Generating RBAC manifests for controller manager..."
      - |
        set -e
        RBAC_OUTPUT_DIR="config/controller-manager"
        "{{.TOOL_DIR}}/controller-gen" rbac:roleName=milo-controller-manager paths="./..." output:dir="$RBAC_OUTPUT_DIR"
        # controller-gen outputs "role.yaml" by default; rename for consistency with existing kustomization reference
        if [ -f "$RBAC_OUTPUT_DIR/role.yaml" ]; then
          mv -f "$RBAC_OUTPUT_DIR/role.yaml" "$RBAC_OUTPUT_DIR/clusterrole.yaml"
        fi
    silent: true

  generate-openapi:
    desc: Generate OpenAPI definitions for IAM resources and related types
    deps:
      - task: install-go-tool
        vars:
          NAME: openapi-gen
          PACKAGE: k8s.io/code-generator/cmd/openapi-gen
          VERSION: v0.23.0
    cmds:
      - echo "Generating OpenAPI definitions for IAM types..."
      - |
        set -e
        "{{.TOOL_DIR}}/openapi-gen" \
          --input-dirs=go.miloapis.com/milo/pkg/apis/iam/v1alpha1 \
          --output-package=pkg/apis/iam/v1alpha1 \
          --output-base=. \
          --output-file-base=zz_generated.openapi \
          --go-header-file=hack/boilerplate.go.txt
    silent: true

  api-docs:
    desc: Generate API docs
    deps:
      - task: install-go-tool
        vars:
          NAME: crdoc
          PACKAGE: fybrik.io/crdoc
          VERSION: "{{.CRDOC_VERSION}}"
    cmds:
      - |
        set -e ;
        mkdir -p docs/api ;
        for crdmanifest in config/crd/bases/*; do
          filename="$(basename -s .resourcemanager.miloapis.com.yaml $crdmanifest)" ;
          filename="${filename#apiextensions.k8s.io_v1_customresourcedefinition_}" ;
          bin/crdoc --resources $crdmanifest --output docs/api/$filename.md ;
        done;
    silent: true

  install-go-tool:
    desc: Install a Go tool to {{.TOOL_DIR}}/{{.NAME}} (symlinked from {{.TOOL_DIR}}/{{.NAME}}-{{.VERSION}})
    internal: true
    # vars: - Variables that need to be set when depending on this task
    #   NAME:
    #   PACKAGE:
    #   VERSION:
    cmds:
      - mkdir -p {{.TOOL_DIR}}
      - |
        set -e
        # Capture Taskfile vars into shell vars for clarity and safety in the script
        _NAME="{{.NAME}}"
        _PACKAGE="{{.PACKAGE}}"
        _VERSION="{{.VERSION}}"
        _TOOL_DIR="{{.TOOL_DIR}}"

        _VERSIONED_TOOL_PATH="$_TOOL_DIR/$_NAME-$_VERSION" # e.g., ./bin/crdoc-v0.6.4
        _SYMLINK_PATH="$_TOOL_DIR/$_NAME"                 # e.g., ./bin/crdoc (this is where go install puts it first)

        # Check if the correctly versioned binary already exists
        if [ ! -f "$_VERSIONED_TOOL_PATH" ]; then
          echo "Downloading $_PACKAGE@$_VERSION (binary name: $_NAME) to $_VERSIONED_TOOL_PATH"

          # Ensure the path where `go install` will place the binary (before mv) is clear.
          # This is $_SYMLINK_PATH (e.g., ./bin/crdoc).
          if [ -d "$_SYMLINK_PATH" ]; then
            echo "Error: Target path $_SYMLINK_PATH for 'go install' is an existing directory. Please remove it manually."
            exit 1
          fi
          # Remove if it's a file or symlink, to mimic `rm -f $(1)` from Makefile.
          # This ensures 'go install' doesn't conflict with an existing symlink or wrong file.
          echo "Preparing $_SYMLINK_PATH for new installation..."
          rm -f "$_SYMLINK_PATH" || true

          echo "Installing with GOBIN=$_TOOL_DIR..."
          # 'go install' will place the executable (named $_NAME) into $_TOOL_DIR.
          # This relies on $_NAME being the actual binary name derived from $_PACKAGE.
          if ! GOBIN="$_TOOL_DIR" go install "$_PACKAGE@$_VERSION"; then
            echo "Failed to 'go install $_PACKAGE@$_VERSION' with GOBIN=$_TOOL_DIR"
            exit 1
          fi

          # After `go install`, the binary should be at $_SYMLINK_PATH (e.g. $_TOOL_DIR/$_NAME)
          if [ ! -f "$_SYMLINK_PATH" ]; then
            echo "Error: 'go install' did not produce $_SYMLINK_PATH"
            # As a fallback, check if it was installed with the package basename if _NAME was different
            _PKG_BASENAME=$(basename "$_PACKAGE")
            if [ "$_PKG_BASENAME" != "$_NAME" ] && [ -f "$_TOOL_DIR/$_PKG_BASENAME" ]; then
                echo "Found $_TOOL_DIR/$_PKG_BASENAME instead (package basename). Moving this one."
                mv "$_TOOL_DIR/$_PKG_BASENAME" "$_VERSIONED_TOOL_PATH"
            else
                echo "Please ensure the NAME variable ('$_NAME') accurately matches the binary name produced by 'go install $_PACKAGE'."
                exit 1
            fi
          else
            # Binary $_SYMLINK_PATH was created as expected. Now move it to its versioned path.
            echo "Moving installed binary from $_SYMLINK_PATH to $_VERSIONED_TOOL_PATH"
            mv "$_SYMLINK_PATH" "$_VERSIONED_TOOL_PATH"
          fi

          # Create/update the symlink (e.g., ./bin/crdoc -> crdoc-v0.6.4)
          # The target of the symlink is relative to _TOOL_DIR.
          echo "Creating/updating symlink: $_SYMLINK_PATH -> $_NAME-$_VERSION (within $_TOOL_DIR)"
          (cd "$_TOOL_DIR" && ln -sf "$_NAME-$_VERSION" "$_NAME")
          echo "Tool $_NAME is now available at $_SYMLINK_PATH (points to $_VERSIONED_TOOL_PATH)"
        fi

    silent: true
