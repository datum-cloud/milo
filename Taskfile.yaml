version: '3'

vars:
  TOOL_DIR: "{{.USER_WORKING_DIR}}/bin"
  CERTS_DIR: "{{.USER_WORKING_DIR}}/certs"
  # renovate: datasource=go depName=sigs.k8s.io/controller-tools
  CONTROLLER_TOOLS_VERSION: v0.18.0
  # renovate: datasource=go depName=fybrik.io/crdoc
  CRDOC_VERSION: v0.6.4
  # renovate: datasource=go depName=github.com/kyverno/chainsaw
  CHAINSAW_VERSION: v0.2.12
  # Container image configuration
  MILO_IMAGE_NAME: "ghcr.io/datum-cloud/milo"
  MILO_IMAGE_TAG: "dev"
  TEST_INFRA_CLUSTER_NAME: "test-infra"
  # Test infra repository configuration - can be overridden with environment variable
  TEST_INFRA_REPO_REF: 'parallelize-component-install'

includes:
  # Must set TASK_X_REMOTE_TASKFILES=1 to use this feature.
  #
  # See: https://taskfile.dev/experiments/remote-taskfiles
  test-infra:
    taskfile: https://raw.githubusercontent.com/datum-cloud/test-infra/{{.TEST_INFRA_REPO_REF}}/Taskfile.yml
    checksum: d7fe71654d8b9eaaaca146f2748d64b8292efbd4b4b4333ace0b43fba0bcc9b6
    vars:
      REPO_REF: "{{.TEST_INFRA_REPO_REF}}"

tasks:
  default:
    desc: List all available tasks
    cmds:
      - task --list
    silent: true

  kubectl:
    desc: Run kubectl commands against the Milo API server
    silent: true
    cmds:
      - KUBECONFIG=.milo/kubeconfig kubectl {{.CLI_ARGS}}

  dev:build:
    desc: Build the Milo container image for development
    silent: true
    cmds:
      - |
        set -e
        echo "Building Milo container image: {{.MILO_IMAGE_NAME}}:{{.MILO_IMAGE_TAG}}"
        docker build -t "{{.MILO_IMAGE_NAME}}:{{.MILO_IMAGE_TAG}}" .
        echo "Successfully built {{.MILO_IMAGE_NAME}}:{{.MILO_IMAGE_TAG}}"
    sources:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Dockerfile"
    generates:
      - ".task-build-timestamp"
    method: timestamp

  dev:load:
    desc: Load the Milo container image into the kind cluster
    silent: true
    cmds:
      - |
        set -e
        echo "Loading image {{.MILO_IMAGE_NAME}}:{{.MILO_IMAGE_TAG}} into kind cluster '{{.TEST_INFRA_CLUSTER_NAME}}'..."
        kind load docker-image "{{.MILO_IMAGE_NAME}}:{{.MILO_IMAGE_TAG}}" --name "{{.TEST_INFRA_CLUSTER_NAME}}"
        echo "Successfully loaded image into kind cluster"

  dev:deploy:
    desc: Deploy complete Milo control plane (etcd + API server + controller manager) to test-infra cluster
    silent: true
    deps:
      - generate:code
    cmds:
      - |
        set -e
        echo "üöÄ Deploying complete Milo control plane to test-infra cluster..."

        # Deploy all components including etcd, API server, controller manager, webhooks, RBAC, and networking
        # Everything is deployed in the milo-system namespace for simplified testing
        echo "üìã Deploying Milo control plane with etcd storage backend..."
        task test-infra:kubectl -- apply -k config/overlays/test-infra/

        # Wait for etcd Helm release to be complete (ensures deployment is fully reconciled)
        echo "‚è≥ Waiting for etcd Helm release to be ready..."
        task test-infra:kubectl -- wait --for=condition=Ready helmrelease/etcd -n milo-system --timeout=300s

        # Wait for etcd pod readiness (API server needs etcd to store data)
        echo "‚è≥ Waiting for etcd pod to be ready..."
        task test-infra:kubectl -- wait --for=condition=Ready pod -l app.kubernetes.io/component=etcd -n milo-system --timeout=180s

        # Wait for API server to be ready (required for CRD installation)
        # API server must be running before we can install custom resources
        echo "‚è≥ Waiting for API server to be ready..."
        task test-infra:kubectl -- wait --for=condition=Ready pod -l app.kubernetes.io/name=milo-apiserver -n milo-system --timeout=180s

        # Install CRDs into Milo API server (defines custom resource schemas)
        # Controller manager needs these CRDs to watch and reconcile custom resources
        echo "üìã Installing core control plane CRDs into Milo API server..."
        task kubectl -- apply -k config/crd/overlays/core-control-plane/
        task kubectl -- wait --for=condition=Established customresourcedefinitions --all

        # Step 6b: Install infrastructure control plane CRDs into Milo API server
        # This includes ProjectControlPlanes needed by the controller manager
        echo "üìã Installing infrastructure control plane CRDs into the infrastructure cluster..."
        task test-infra:kubectl -- apply -k config/crd/overlays/infra-control-plane/
        task test-infra:kubectl -- wait --for=condition=Established customresourcedefinitions projectcontrolplanes.infrastructure.miloapis.com

        # Step 7: Verify CRDs are properly installed (sanity check)
        echo "‚úÖ Verifying CRDs are installed..."
        CRD_COUNT=$(task kubectl -- get crd --no-headers | grep miloapis | wc -l || echo "0")
        echo "Installed $CRD_COUNT Milo CRDs in API server"

        # Step 7b: Create test users in Milo API server
        echo "üë§ Creating test users in Milo API server..."
        task kubectl -- apply -f config/overlays/test-infra/resources/test-users.yaml

        # Step 8: Wait for controller manager (now that CRDs exist for it to reconcile)
        # Controller manager can only start successfully after CRDs are available
        echo "‚è≥ Waiting for controller manager to be ready..."
        task test-infra:kubectl -- wait --for=condition=Ready pod -l app.kubernetes.io/name=milo-controller-manager -n milo-system --timeout=120s

        # Step 8b: Install webhook configurations to Milo API server
        # Webhooks validate and mutate resources submitted to the Milo API server
        echo "üîí Installing webhook configurations to Milo API server..."
        task kubectl -- apply -k config/webhook/
        # Webhook configurations don't have conditions to wait for - they're ready immediately after creation
        echo "‚úÖ Webhook configurations installed successfully"

        WEBHOOK_COUNT=$(task kubectl -- get mutatingwebhookconfigurations,validatingwebhookconfigurations --no-headers | grep resourcemanager.miloapis.com | wc -l || echo "0")
        echo "Installed $WEBHOOK_COUNT webhook configurations in Milo API server"

        # Update kubeconfig for easy developer access
        echo "üìù Updating kubeconfig for developer access..."

        # Step 9: Restart deployments to ensure they pick up the latest image
        echo "üîÑ Restarting deployments to pick up latest image..."
        task test-infra:kubectl -- rollout restart deployment/milo-apiserver -n milo-system
        task test-infra:kubectl -- rollout restart deployment/milo-controller-manager -n milo-system

        # Wait for rollouts to complete
        echo "‚è≥ Waiting for deployments to restart..."
        task test-infra:kubectl -- rollout status deployment/milo-apiserver -n milo-system --timeout=120s
        task test-infra:kubectl -- rollout status deployment/milo-controller-manager -n milo-system --timeout=120s

        echo ""
        echo "‚úÖ Milo API server and storage deployed successfully!"
        echo ""
        echo "üìä Status:"
        echo "  etcd: task test-infra:kubectl -- get pods -n milo-system -l app.kubernetes.io/component=etcd"
        echo "  API server: task test-infra:kubectl -- get pods -n milo-system -l app.kubernetes.io/name=milo-apiserver"
        echo "  Controller manager: task test-infra:kubectl -- get pods -n milo-system -l app.kubernetes.io/name=milo-controller-manager"
        echo ""
        echo "üîó Access:"
        echo "  Gateway: https://localhost:30443 (via Envoy Gateway)"
        echo ""
        echo "üîê Authentication:"
        echo "  Kubeconfig: .milo/kubeconfig"
        echo "  Usage: task kubectl -- <command>"
        echo ""
        echo "üéØ Test custom resources:"
        echo "  task kubectl -- get organizations"
        echo "  task kubectl -- get projects"
        echo "  task kubectl -- get users    # Should show 'admin' and 'test-user'"
        echo ""
        echo "üìã Available tokens:"
        echo "  Admin: test-admin-token (system:masters)"
        echo "  User: test-user-token (system:authenticated)"

  dev:setup:
    desc: Complete setup of test-infra cluster with full Milo control plane
    silent: true
    cmds:
      - task: test-infra:cluster-up
      - task: dev:build
      - task: dev:load
      - task: dev:deploy

  dev:redeploy:
    desc: Quick rebuild and redeploy for development iterations
    deps:
      - dev:load
    cmds:
      - |
        set -e
        echo "Redeploying Milo controller manager..."

        # Restart the deployment to pick up new image
        task test-infra:kubectl -- rollout restart deployment/milo-controller-manager -n milo-system

        # Wait for rollout to complete
        echo "Waiting for rollout to complete..."
        task test-infra:kubectl -- rollout status deployment/milo-controller-manager -n milo-system --timeout=120s

        echo "‚úÖ Redeployment complete!"
        echo "Check logs with: task test-infra:kubectl -- logs -n milo-system -l app.kubernetes.io/name=milo-controller-manager"

  test:end-to-end:
    desc: Run end to end tests using Chainsaw against Milo API server. Pass directory names to run specific tests (e.g., 'task test:end-to-end -- quota' or 'task test:end-to-end -- quota group')
    deps:
      - task: install-go-tool
        vars:
          NAME: chainsaw
          PACKAGE: github.com/kyverno/chainsaw
          VERSION: "{{.CHAINSAW_VERSION}}"
    cmds:
      - |
        set -e
        echo "Running Chainsaw end to end tests against Milo API server..."
        echo "Using Milo API server via .milo/kubeconfig"

        # Verify Milo kubeconfig exists
        if [ ! -f ".milo/kubeconfig" ]; then
          echo "Error: Milo kubeconfig not found at .milo/kubeconfig"
          echo "Please run 'task dev:setup' to set up the test infrastructure first."
          exit 1
        fi

        # Verify connectivity to Milo API server
        echo "Verifying connectivity to Milo API server..."
        if ! KUBECONFIG=.milo/kubeconfig kubectl get --raw /healthz &>/dev/null; then
          echo "Error: Cannot connect to Milo API server"
          echo "Please ensure the test infrastructure is running with 'task dev:setup'"
          echo "You can check the status with:"
          echo "  task test-infra:kubectl -- get pods -n milo-system"
          exit 1
        fi
        echo "‚úì Successfully connected to Milo API server"

        # Determine test paths based on CLI arguments
        if [ -z "{{.CLI_ARGS}}" ]; then
          # No arguments provided - run all tests
          echo "No test directories specified - running all end-to-end tests..."
          TEST_PATHS="test/"
        else
          # Arguments provided - construct test paths
          echo "Running tests for specified directories: {{.CLI_ARGS}}"
          TEST_PATHS=""
          for dir in {{.CLI_ARGS}}; do
            if [ -d "test/$dir" ]; then
              TEST_PATHS="$TEST_PATHS test/$dir"
            else
              echo "Warning: Test directory 'test/$dir' does not exist, skipping..."
            fi
          done

          # Check if we found any valid test directories
          if [ -z "$TEST_PATHS" ]; then
            echo "Error: No valid test directories found for arguments: {{.CLI_ARGS}}"
            echo "Available test directories:"
            ls -1 test/ | grep -v "^config$" | grep -v "^docker-compose.yaml$" || true
            exit 1
          fi
        fi

        echo "Test paths: $TEST_PATHS"
        KUBECONFIG=.milo/kubeconfig "{{.TOOL_DIR}}/chainsaw" test $TEST_PATHS --selector "requires!=authorization-provider"
    silent: true

  test:unit:
    desc: Run unit tests
    cmds:
      - |
        set -e
        echo "Running unit tests..."
        go test ./... -v
    silent: true

  # Code generation tasks
  generate:
    desc: Generate code (alias for generate:code for backward compatibility)
    cmds:
      - task: generate:code
      - task: generate:docs

  generate:code:
    desc: Generate code including deepcopy, objects, CRDs, and potentially protobuf marshallers
    deps:
      - task: install-go-tool
        vars:
          NAME: controller-gen
          PACKAGE: sigs.k8s.io/controller-tools/cmd/controller-gen
          VERSION: "{{.CONTROLLER_TOOLS_VERSION}}"
    cmds:
      - echo "Generating deepcopy and object files..."
      - "\"{{.TOOL_DIR}}/controller-gen\" object paths=\"./pkg/apis/...\""
      - echo "Generating CRD manifests for each package..."
      - |
        set -e
        for package_dir in pkg/apis/*/; do
          package_name=$(basename "$package_dir")
          echo "Generating CRDs for package: $package_name"
          mkdir -p "config/crd/bases/$package_name"
          "{{.TOOL_DIR}}/controller-gen" crd paths="./$package_dir..." output:dir="./config/crd/bases/$package_name"
        done
      - echo "Generating webhook files..."
      - "\"{{.TOOL_DIR}}/controller-gen\" webhook paths=\"./internal/webhooks/...\" output:dir=\"./config/webhook\""
      # Generate RBAC rules for the controllers.
      - echo "Generating RBAC rules for the controllers..."
      - "\"{{.TOOL_DIR}}/controller-gen\" rbac:roleName=milo-controller-manager paths=\"./internal/controllers/...\" output:dir=\"./config/controller-manager/overlays/core-control-plane/rbac\""
    silent: true

  generate:docs:
    desc: Generate API docs
    deps:
      - task: install-go-tool
        vars:
          NAME: crdoc
          PACKAGE: fybrik.io/crdoc
          VERSION: "{{.CRDOC_VERSION}}"
    cmds:
      - |
        set -e ;
        mkdir -p docs/api ;
        for crdmanifest in config/crd/bases/*; do
          filename="$(basename -s .resourcemanager.miloapis.com.yaml $crdmanifest)" ;
          filename="${filename#apiextensions.k8s.io_v1_customresourcedefinition_}" ;
          bin/crdoc --resources $crdmanifest --output docs/api/$filename.md ;
        done;
    silent: true

  install-go-tool:
    desc: Install a Go tool to {{.TOOL_DIR}}/{{.NAME}} (symlinked from {{.TOOL_DIR}}/{{.NAME}}-{{.VERSION}})
    silent: true
    internal: true
    # vars: - Variables that need to be set when depending on this task
    #   NAME:
    #   PACKAGE:
    #   VERSION:
    cmds:
      - mkdir -p {{.TOOL_DIR}}
      - |
        set -e
        # Capture Taskfile vars into shell vars for clarity and safety in the script
        _NAME="{{.NAME}}"
        _PACKAGE="{{.PACKAGE}}"
        _VERSION="{{.VERSION}}"
        _TOOL_DIR="{{.TOOL_DIR}}"

        _VERSIONED_TOOL_PATH="$_TOOL_DIR/$_NAME-$_VERSION" # e.g., ./bin/crdoc-v0.6.4
        _SYMLINK_PATH="$_TOOL_DIR/$_NAME"                 # e.g., ./bin/crdoc (this is where go install puts it first)

        # Check if the correctly versioned binary already exists
        if [ ! -f "$_VERSIONED_TOOL_PATH" ]; then
          echo "Downloading $_PACKAGE@$_VERSION (binary name: $_NAME) to $_VERSIONED_TOOL_PATH"

          # Ensure the path where `go install` will place the binary (before mv) is clear.
          # This is $_SYMLINK_PATH (e.g., ./bin/crdoc).
          if [ -d "$_SYMLINK_PATH" ]; then
            echo "Error: Target path $_SYMLINK_PATH for 'go install' is an existing directory. Please remove it manually."
            exit 1
          fi
          # Remove if it's a file or symlink, to mimic `rm -f $(1)` from Makefile.
          # This ensures 'go install' doesn't conflict with an existing symlink or wrong file.
          echo "Preparing $_SYMLINK_PATH for new installation..."
          rm -f "$_SYMLINK_PATH" || true

          echo "Installing with GOBIN=$_TOOL_DIR..."
          # 'go install' will place the executable (named $_NAME) into $_TOOL_DIR.
          # This relies on $_NAME being the actual binary name derived from $_PACKAGE.
          if ! GOBIN="$_TOOL_DIR" go install "$_PACKAGE@$_VERSION"; then
            echo "Failed to 'go install $_PACKAGE@$_VERSION' with GOBIN=$_TOOL_DIR"
            exit 1
          fi

          # After `go install`, the binary should be at $_SYMLINK_PATH (e.g. $_TOOL_DIR/$_NAME)
          if [ ! -f "$_SYMLINK_PATH" ]; then
            echo "Error: 'go install' did not produce $_SYMLINK_PATH"
            # As a fallback, check if it was installed with the package basename if _NAME was different
            _PKG_BASENAME=$(basename "$_PACKAGE")
            if [ "$_PKG_BASENAME" != "$_NAME" ] && [ -f "$_TOOL_DIR/$_PKG_BASENAME" ]; then
                echo "Found $_TOOL_DIR/$_PKG_BASENAME instead (package basename). Moving this one."
                mv "$_TOOL_DIR/$_PKG_BASENAME" "$_VERSIONED_TOOL_PATH"
            else
                echo "Please ensure the NAME variable ('$_NAME') accurately matches the binary name produced by 'go install $_PACKAGE'."
                exit 1
            fi
          else
            # Binary $_SYMLINK_PATH was created as expected. Now move it to its versioned path.
            echo "Moving installed binary from $_SYMLINK_PATH to $_VERSIONED_TOOL_PATH"
            mv "$_SYMLINK_PATH" "$_VERSIONED_TOOL_PATH"
          fi

          # Create/update the symlink (e.g., ./bin/crdoc -> crdoc-v0.6.4)
          # The target of the symlink is relative to _TOOL_DIR.
          echo "Creating/updating symlink: $_SYMLINK_PATH -> $_NAME-$_VERSION (within $_TOOL_DIR)"
          (cd "$_TOOL_DIR" && ln -sf "$_NAME-$_VERSION" "$_NAME")
          echo "Tool $_NAME is now available at $_SYMLINK_PATH (points to $_VERSIONED_TOOL_PATH)"
        fi
