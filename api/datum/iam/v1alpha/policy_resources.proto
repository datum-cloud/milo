syntax = "proto3";

package datum.iam.v1alpha;

import "datum/api/meta/v1alpha/condition.proto";
import "google/api/field_behavior.proto";
import "google/api/field_info.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";

option go_package = "go.datumapis.com/os/genproto/iam/v1alpha;iampb";

// An  Identity and Access Management (IAM) Policy defines access to a resource.
//
// A `Policy` is a collection of `bindings`. Each `binding` binds one or more
// `members` to a single `role`. A `member` can be users, service accounts, and
// groups. A `role` is a named list of permissions. Each `role` can be an
// officially defined role provided by a service (e.g.
// services/compute.datumapis.com/roles/workloadAdmin) or a user-created custom
// role (e.g. organizations/000-000-000/roles/customRole).
//
// IAM Policies are implicitly managed for every resource on the platform. The
// IAM policy of a resource can be managed through the
// [datum.iam.v1alpha.IAMPolicy] service. Every service that creates
// resources is expected to provide an implementation of the IAMPolicy service
// to manage it's resource's policies.
//
// (-- api-linter: core::0123::resource-name-field=disabled
//     aip.dev/not-precedent: The Policy resource will not have a `name` field
//     because it is an implicitly created resource and will always be created
//     with the same resource name it was created for. As an example, the IAM
//     policy for a project will be retrieved using the resource name of the
//     project (e.g. `projects/my-project`).
// --)
//
// (-- api-linter: core::0123::resource-pattern=disabled
//     aip.dev/not-precedent: The Policy resource will not have a resource name
//     assigned and will instead be retrieved through the resource its created
//     on. See the internal comment above.
// --)
message Policy {
  option (google.api.resource) = {
    type: "iam.datumapis.com/Policy"
    singular: "policy"
    plural: "policies"
  };

  // A system generated unique identifier for the policy.
  string uid = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_info).format = UUID4
  ];

  // Resource name the policy is attached to.
  string name = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IDENTIFIER
  ];

  // Annotations is an unstructured key-value map stored with a Policy that may
  // be set by external tools to store and retrieve arbitrary metadata. They are
  // not queryable and should be preserved when modifying objects.
  map<string, string> annotations = 3 [(google.api.field_behavior) = OPTIONAL];

  // Labels is an unstructured key-value map stored with a Policy that may be
  // set by external tools to enable platform features which identify policies
  // via label selections.
  map<string, string> labels = 4 [(google.api.field_behavior) = OPTIONAL];

  // Timestamp of when the policy was created.
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The last time that the Policy is updated.
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // This checksum is computed by the server based on the value of other fields,
  // and might be sent on update requests to ensure the client has an up-to-date
  // value before proceeding.
  string etag = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Defines the configuration options that are used to manage the behavior of
  // an IAM Policy.
  PolicySpec spec = 8 [(google.api.field_behavior) = REQUIRED];

  // Provides the latest status information of the IAM Policy. Updates to this
  // field will not change the `etag` of the IAM Policy.
  PolicyStatus status = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Configuration options to influence the behavior of the IAM Policy.
message PolicySpec {
  // Associates a list of `members`, with a `role`. Each of the `bindings` must
  // contain at least one member.
  //
  // Each Policy can bind up to 1,500 members to roles. These bindings can
  // happen in one or many `bindings`.
  repeated Binding bindings = 1 [(google.api.field_behavior) = REQUIRED];
}

// Provides the latest status information for an IAM Policy.
message PolicyStatus {
  // Provides conditions that represent the current status of the IAM Policy.
  // These conditions can provide more information around the policy, like
  // whether the latest policy changes have been applied to the system.
  datum.api.meta.v1alpha.Condition status_conditions = 1 [(google.api.field_behavior) = REQUIRED];
}

// Associates `members` with a `role`.
message Binding {
  // Role that is assigned to the list of `members`. The user updating the IAM
  // Policy must have access to use the role provided.
  string role = 1 [(google.api.field_behavior) = REQUIRED];

  // Specifies the members requesting access for a resource on the platform. The
  // `members` options can have the following values:
  //
  // * `allUsers`: A special identifier that represents anyone who is on the
  //    internet; with or without an account.
  //
  // * `allAuthenticatedUsers`: A special identifier that represents anyone who
  //    is authenticated with a Google account or a service account.
  //
  // * `user:{emailid}`: An email address that represents a specific Google
  //    account. For example, `alice@example.com` .
  //
  // * `serviceAccount:{emailid}`: An email address that represents a service
  //    account. For example, `my-service@my-project.datum.ncom`.
  //
  // * `group:{group_resource_name}`: The resource name of a group.
  //    For example, `organizations/123/groups/my-admin-group`.
  repeated string members = 2 [(google.api.field_behavior) = REQUIRED];
}
