syntax = "proto3";

package datum.resourcemanager.v1alpha;

import "datum/api/annotations.proto";
import "datum/resourcemanager/v1alpha/invitations_resources.proto";
import "datum/resourcemanager/v1alpha/organizations_resources.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/api/visibility.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";

option go_package = "go.datumapis.com/os/genproto/resourcemanager/v1alpha;resourcemanagerpb";

// Invitations is the service for managing Invitations.
service Invitations {
  option (google.api.api_visibility) = {restriction: "PUBLIC"};

  // CreateInvitation creates a new invitation.
  rpc CreateInvitation(CreateInvitationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.create";
    option (datum.api.iam_resource_name) = "iam.datumapis.com/root/resourcemanager.datumapis.com/Invitation";
    option (google.api.method_signature) = "parent,invitation,invitation_id";
    option (google.api.http) = {
      post: "/v1alpha/{parent=organizations/*}/invitations"
      body: "invitation"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Invitation"
      metadata_type: "CreateInvitationMetadata"
    };
  }

  // GetInvitation gets an Invitation by name.
  rpc GetInvitation(GetInvitationRequest) returns (Invitation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.get";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/v1alpha/{name=organizations/*/invitations/*}"};
  }

  // ListInvitations lists all Invitations.
  rpc ListInvitations(ListInvitationsRequest) returns (ListInvitationsResponse) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.list";
    option (google.api.method_signature) = "parent";
    option (datum.api.iam_resource_name) = "iam.datumapis.com/root/resourcemanager.datumapis.com/Invitation";
    option (google.api.http) = {get: "/v1alpha/{parent=organizations/*}/invitations"};
  }

  // UpdateInvitation updates an Invitation.
  rpc UpdateInvitation(UpdateInvitationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.update";
    option (google.api.method_signature) = "invitation,update_mask";
    option (google.api.http) = {
      patch: "/v1alpha/{invitation.name=organizations/*/invitations/*}"
      body: "invitation"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Invitation"
      metadata_type: "UpdateInvitationMetadata"
    };
  }

  // DeleteInvitation deletes an Invitation by name.
  rpc DeleteInvitation(DeleteInvitationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.delete";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/v1alpha/{name=organizations/*/invitations/*}"};
    option (google.longrunning.operation_info) = {
      response_type: "Invitation"
      metadata_type: "DeleteInvitationMetadata"
    };
  }

  // AcceptInvitation accepts and invitation to join an organization.
  // Imperative only.
  rpc AcceptInvitation(AcceptInvitationRequest) returns (AcceptInvitationResponse) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/invitations.accept";
    option (google.api.http) = {
      post: "/v1alpha/{name=organizations/*/invitations/*}:accept"
      body: "*"
    };
  }
}

// CreateInvitationRequest is the request for creating an Invitation.
message CreateInvitationRequest {
  // The resource name to use as the parent in the invitations's resource hierarchy.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Organization"}
  ];
  // The ID to use for the Invitation. If not specified, an ID will be
  // automatically generated. If the ID is automatically generated, the Client
  // is responsible for reconciliation.
  string invitation_id = 2 [(google.api.field_behavior) = OPTIONAL];
  // The Invitation to create.
  Invitation invitation = 3 [(google.api.field_behavior) = REQUIRED];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when creating a new
// invitation.
message CreateInvitationMetadata {}

// GetInvitationRequest is the request for getting an Invitation by name.
message GetInvitationRequest {
  // The name of the Invitation get.
  // Format: invitations/{invitation}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Invitation"}
  ];
}

// ListInvitationsRequest is the request for listing Invitations.
message ListInvitationsRequest {
  // The resource name to use as the parent in the invitations's resource hierarchy.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Organization"}
  ];
  // The maximum number of Invitations to return. The service may return fewer than
  // this value. If unspecified, at most 50 Invitations will be returned. The maximum
  // value is 1000.
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListInvitations` call. Provide this to
  // retrieve the subsequent page. When paginating, all other parameters must
  // match the call that provided the page token.
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
  // If true, the deleted Users will be included in the response.
  bool show_deleted = 4 [(google.api.field_behavior) = OPTIONAL];
  // Optional. A filter to apply to the results.
  string filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListInvitationsResponse is the response for listing Invitations.
message ListInvitationsResponse {
  // The list of Invitations.
  repeated Invitation invitations = 1;
  // A token to retrieve the next page of results.
  // Pass this value in the ListInvitationsRequest.page_token field in a
  // subsequent call to `ListInvitations` to retrieve the next page of
  // results. If the page token is not set, there are no more results.
  string next_page_token = 2;
}

// UpdateInvitationRequest is the request for updating an Invitation.
// (-- api-linter: core::0134::request-allow-missing-field=disabled
//     aip.dev/not-precedent: We really need this field because we only
// want Invitations to be created using the corresponding creation flow. --)
message UpdateInvitationRequest {
  // The Invitation to update.
  Invitation invitation = 1 [(google.api.field_behavior) = REQUIRED];
  // The field mask to update the Invitation.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when updating a new
// Invitation.
message UpdateInvitationMetadata {}

// DeleteInvitationRequest is the request for deleting an invitation by
// name.
message DeleteInvitationRequest {
  // The name of the invitation to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Invitation"}
  ];
  // The etag of the invitation to delete. If this is not the same etag as the
  // currently stored invitation, the request will be rejected. If not
  // provided, the invitation will be deleted unconditionally.
  string etag = 2 [(google.api.field_behavior) = OPTIONAL];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
  // If true, an invitation that is missing or previously deleted will be
  // deleted successfully.
  bool allow_missing = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when deleting a
// invitation.
message DeleteInvitationMetadata {}

// AcceptInvitationRequest is the request for accepting an invitation to join an
// organization.
// (-- api-linter: core::0154::declarative-friendly-required=disabled
//     aip.dev/not-precedent: We don't need an etag in the AcceptInvitationRequest because accepting an invitation is an idempotent operation that does not modify the invitation resource itself.. --)
message AcceptInvitationRequest {
  // The name of the Invitation to accept.
  // Format: organizations/{organization}/invitations/{invitation}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Invitation"}
  ];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
}

// AcceptInvitationResponse is the response for accepting an invitation to join
// an organization.
message AcceptInvitationResponse {
  // The organization that the user is invited to join.
  Organization organization = 1;
}
