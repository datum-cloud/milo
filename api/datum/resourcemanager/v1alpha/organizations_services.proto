syntax = "proto3";

package datum.resourcemanager.v1alpha;

import "datum/api/annotations.proto";
import "datum/resourcemanager/v1alpha/organizations_resources.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/api/visibility.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";

option go_package = "go.datumapis.com/os/genproto/resourcemanager/v1alpha;resourcemanagerpb";

// Organizations is the service for managing Organizations.
service Organizations {
  option (google.api.api_visibility) = {restriction: "PUBLIC"};

  // CreateOrganization creates a new Organization.
  //
  // (-- api-linter: core::0133::method-signature=disabled
  //     aip.dev/not-precedent: The service resource does not have a parent. --)
  rpc CreateOrganization(CreateOrganizationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.create";
    option (datum.api.iam_resource_name) = "iam.datumapis.com/root/resourcemanager.datumapis.com/Organization";
    option (google.api.method_signature) = "organization,organization_id";
    option (google.api.http) = {
      post: "/v1alpha/organizations"
      body: "organization"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Organization"
      metadata_type: "CreateOrganizationMetadata"
    };
  }

  // GetOrganization gets an Organization by name.
  rpc GetOrganization(GetOrganizationRequest) returns (Organization) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.get";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {get: "/v1alpha/{name=organizations/*}"};
  }

  // ListOrganizations lists all Organizations.
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.list";
    option (datum.api.iam_resource_name) = "iam.datumapis.com/root/resourcemanager.datumapis.com/Organization";
    option (google.api.http) = {get: "/v1alpha/organizations"};
  }

  // UpdateOrganization updates an Organization.
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.update";
    option (google.api.method_signature) = "organization,update_mask";
    option (google.api.http) = {
      patch: "/v1alpha/{organization.name=organizations/*}"
      body: "organization"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Organization"
      metadata_type: "UpdateOrganizationMetadata"
    };
  }

  // DeleteOrganization deletes an Organization by name.
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (google.longrunning.Operation) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.delete";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {delete: "/v1alpha/{name=organizations/*}"};
    option (google.longrunning.operation_info) = {
      response_type: "Organization"
      metadata_type: "DeleteOrganizationMetadata"
    };
  }

  // SearchOrganizations searches for Organizations in which the user is a member of.
  rpc SearchOrganizations(SearchOrganizationsRequest) returns (SearchOrganizationsResponse) {
    option (datum.api.required_permissions) = "resourcemanager.datumapis.com/organizations.search";
    option (datum.api.iam_resource_name) = "iam.datumapis.com/root/resourcemanager.datumapis.com/Organization";
    option (google.api.http) = {
      post: "/v1alpha/organizations:search"
      body: "*"
    };
  }
}

// CreateOrganizationRequest is the request for creating an Organization.
message CreateOrganizationRequest {
  // The ID to use for the Organization. If not specified, an ID will be
  // automatically generated. If the ID is automatically generated, the Client
  // is responsible for reconciliation.
  string organization_id = 1 [(google.api.field_behavior) = OPTIONAL];
  // The Organization to create.
  Organization organization = 2 [(google.api.field_behavior) = REQUIRED];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when creating a new
// organization.
message CreateOrganizationMetadata {}

// GetOrganizationRequest is the request for getting an Organization by name.
message GetOrganizationRequest {
  // The name of the Organization to get.
  // Format: organizations/{organization}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Organization"}
  ];
}

// ListOrganizationsRequest is the request for listing Organizations.
message ListOrganizationsRequest {
  // The maximum number of Organizations to return. The service may return fewer than
  // this value. If unspecified, at most 50 Organizations will be returned. The maximum
  // value is 1000.
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // A page token, received from a previous `ListOrganizations` call. Provide this to
  // retrieve the subsequent page. When paginating, all other parameters must
  // match the call that provided the page token.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
  // If true, the deleted Users will be included in the response.
  bool show_deleted = 3 [(google.api.field_behavior) = OPTIONAL];
  // Optional. A filter to apply to the results.
  string filter = 4 [(google.api.field_behavior) = OPTIONAL];
}

// ListOrganizationsResponse is the response for listing Organizations.
message ListOrganizationsResponse {
  // The list of Organizations.
  repeated Organization organizations = 1;
  // A token to retrieve the next page of results.
  // Pass this value in the ListOrganizationsRequest.page_token field in a
  // subsequent call to `ListOrganizations` to retrieve the next page of
  // results. If the page token is not set, there are no more results.
  string next_page_token = 2;
}

// (-- api-linter: core::0134::request-allow-missing-field=disabled
//     aip.dev/not-precedent: We really need this field because we only
// want Organizations to be created using the corresponding creation flow. --)
// UpdateOrganizationRequest is the request for updating an Organization.
message UpdateOrganizationRequest {
  // The Organization to update.
  Organization organization = 1 [(google.api.field_behavior) = REQUIRED];
  // The field mask to update the Organization.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when updating a new
// organization.
message UpdateOrganizationMetadata {}

// DeleteOrganizationRequest is the request for deleting an Organization by
// name.
message DeleteOrganizationRequest {
  // The name of the Organization to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "resourcemanager.datumapis.com/Organization"}
  ];
  // The etag of the Organization to delete. If this is not the same etag as the
  // currently stored Organization, the request will be rejected. If not
  // provided, the Organization will be deleted unconditionally.
  string etag = 2 [(google.api.field_behavior) = OPTIONAL];
  // If true, the request is validated and nothing is persisted.
  bool validate_only = 3 [(google.api.field_behavior) = OPTIONAL];
  // If true, an organization that is missing or previously deleted will be
  // deleted successfully.
  bool allow_missing = 4 [(google.api.field_behavior) = OPTIONAL];
}

// The metadata returned from the long running operations when deleting a
// organization.
message DeleteOrganizationMetadata {}

// SearchOrganizationsRequest is the request for searching Organizations in which
// a user is a member of.
// (-- api-linter: core::0158::request-page-size-field=disabled
//     aip.dev/not-precedent: We prefer to not have that complexity on the
//     response/request, as users won't be part of too many organizations. --)
// (-- api-linter: core::0158::request-page-token-field=disabled
//     aip.dev/not-precedent: We prefer to not have that complexity on the
//     response/request, as users won't be part of too many organizations. --)
message SearchOrganizationsRequest {}

// SearchOrganizationsResponse is the response for searching Organizations.
// (-- api-linter: core::0158::response-next-page-token-field=disabled
//     aip.dev/not-precedent: We prefer to not have that complexity on the
//     response/request, as users won't be part of too many organizations. --)
message SearchOrganizationsResponse {
  // The list of Organizations.
  repeated Organization organizations = 1;
}
