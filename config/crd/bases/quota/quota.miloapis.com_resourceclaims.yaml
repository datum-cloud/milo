---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: resourceclaims.quota.miloapis.com
spec:
  group: quota.miloapis.com
  names:
    kind: ResourceClaim
    listKind: ResourceClaimList
    plural: resourceclaims
    singular: resourceclaim
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Granted')].status
      name: Granted
      type: string
    - jsonPath: .spec.requests[0].resourceType
      name: Resource
      priority: 1
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          ResourceClaim requests quota allocation during resource creation. Claims
          consume quota capacity from AllowanceBuckets and link to the triggering
          Kubernetes resource for lifecycle management and auditing.

          ### How It Works

          **ResourceClaims** follow a straightforward lifecycle from creation to
          resolution. When a **ClaimCreationPolicy** triggers during admission, it
          creates a **ResourceClaim** that immediately enters the quota evaluation
          pipeline. The quota system first validates that the consumer type matches the
          expected `ConsumerType` from the **ResourceRegistration**, then verifies
          that the triggering resource kind is authorized to claim the requested
          resource types.

          Once validation passes, the quota system checks quota availability by
          consulting the relevant **AllowanceBuckets**, one for each (consumer,
          resourceType) combination in the claim's requests. The quota system treats
          all requests in a claim as an atomic unit: either sufficient quota exists for
          every request and the entire claim is granted, or any shortage results in
          denying the complete claim. This atomic approach ensures consistency and
          prevents partial resource allocations that could leave the system in an
          inconsistent state.

          When a claim is granted, it permanently reserves the requested quota amounts
          until the claim is deleted. This consumption immediately reduces the
          available quota in the corresponding **AllowanceBuckets**, preventing other
          claims from accessing that capacity. The quota system updates the claim's
          status with detailed results for each resource request, including which
          **AllowanceBucket** provided the quota and any relevant error messages.

          ### Core Relationships

            - **Created by**: **ClaimCreationPolicy** during admission (automatically) or
              administrators (manually)
            - **Consumes from**: **AllowanceBucket** matching
              (`spec.consumerRef`, `spec.requests[].resourceType`)
            - **Capacity sourced from**: **ResourceGrant** objects aggregated by the bucket
            - **Linked to**: Triggering resource via `spec.resourceRef` for lifecycle management
            - **Validated against**: **ResourceRegistration** for each `spec.requests[].resourceType`

          ### Claim Lifecycle States

            - **Initial**: `Granted=False`, `reason=PendingEvaluation` (claim created, awaiting processing)
            - **Granted**: `Granted=True`, `reason=QuotaAvailable` (all requests allocated successfully)
            - **Denied**: `Granted=False`, `reason=QuotaExceeded` or `ValidationFailed` (requests could not be satisfied)

          ### Automatic vs Manual Claims

          **Automatic Claims** (created by **ClaimCreationPolicy**):

            - Include standard labels and annotations for tracking
            - Set owner references to triggering resource when possible
            - Automatically cleaned up when denied to prevent accumulation
            - Marked with `quota.miloapis.com/auto-created=true` label

          **Manual Claims** (created by administrators):

            - Require explicit metadata and references
            - Not automatically cleaned up when denied
            - Used for testing or special allocation scenarios

          ### Status Information

            - **Overall Status**: `status.conditions[type=Granted]` indicates claim approval
            - **Detailed Results**: `status.allocations[]` provides per-request allocation details
            - **Bucket References**: `status.allocations[].allocatingBucket` identifies quota sources

          ### Field Constraints and Validation

            - Maximum 20 resource requests per claim
            - Each resource type can appear only once in requests
            - Consumer type must match `ResourceRegistration.spec.consumerType` for each requested type
            - Triggering resource kind must be listed in `ResourceRegistration.spec.claimingResources`

          ### Selectors and Filtering

            - **Field selectors**: spec.consumerRef.kind, spec.consumerRef.name, spec.resourceRef.apiGroup, spec.resourceRef.kind, spec.resourceRef.name, spec.resourceRef.namespace
            - **Auto-created labels**: quota.miloapis.com/auto-created, quota.miloapis.com/policy, quota.miloapis.com/gvk
            - **Auto-created annotations**: quota.miloapis.com/created-by, quota.miloapis.com/created-at,  quota.miloapis.com/resource-name

          ### Common Queries

            - All claims for a consumer: field selector spec.consumerRef.kind + spec.consumerRef.name
            - Claims from a specific policy: label selector quota.miloapis.com/policy=<policy-name>
            - Claims for a resource type: add custom labels via policy template
            - Failed claims: field  selector on status conditions

          ### Troubleshooting

            - **Denied claims**: Check status.allocations[].message for specific quota or validation errors
            - **Pending claims**: Verify ResourceRegistration is Active and AllowanceBucket exists
            - **Missing claims**: Check ClaimCreationPolicy conditions and trigger expressions

          ### Performance Considerations

            - Claims are processed synchronously during admission (affects API latency)
            - Large numbers of claims can impact bucket aggregation performance
            - Consider batch processing for bulk resource creation
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ResourceClaimSpec defines the desired state of ResourceClaim.
            properties:
              consumerRef:
                description: |-
                  ConsumerRef identifies the quota consumer making this claim. The consumer
                  must match the ConsumerType defined in the ResourceRegistration for each
                  requested resource type. The system validates this relationship during
                  claim processing.

                  Examples:

                    - Organization consuming Project quota
                    - Project consuming User quota
                    - Organization consuming storage quota
                properties:
                  apiGroup:
                    description: |-
                      APIGroup specifies the API group of the consumer resource.
                      Use full group name for Milo resources.

                      Examples:
                      - "resourcemanager.miloapis.com" (Organization/Project resources)
                      - "iam.miloapis.com" (User/Group resources)
                      - "infrastructure.miloapis.com" (infrastructure resources)
                    type: string
                  kind:
                    description: |-
                      Kind specifies the type of consumer resource.
                      Must match an existing Kubernetes resource type that can receive quota grants.

                      Common consumer types:
                      - "Organization" (top-level quota consumer)
                      - "Project" (project-level quota consumer)
                      - "User" (user-level quota consumer)
                    type: string
                  name:
                    description: |-
                      Name identifies the specific consumer resource instance.
                      Must match the name of an existing consumer resource in the cluster.

                      Examples:
                      - "acme-corp" (Organization name)
                      - "web-application" (Project name)
                      - "john.doe" (User name)
                    type: string
                  namespace:
                    description: |-
                      Namespace identifies the namespace of the consumer resource.
                      Required for namespaced consumer resources (e.g., Projects).
                      Leave empty for cluster-scoped consumer resources (e.g., Organizations).

                      Examples:
                      - "" (empty for cluster-scoped Organizations)
                      - "organization-acme-corp" (namespace for Projects within an organization)
                      - "project-web-app" (namespace for resources within a project)
                    type: string
                required:
                - kind
                - name
                type: object
              requests:
                description: |-
                  Requests specifies the resource types and amounts being claimed from quota.
                  Each resource type can appear only once in the requests array. Minimum 1
                  request, maximum 20 requests per claim.

                  The system processes all requests as a single atomic operation: either all
                  requests are granted or all are denied.
                items:
                  description: |-
                    ResourceRequest defines a single resource request within a ResourceClaim.
                    Each request specifies a resource type and the amount of quota being claimed.
                  properties:
                    amount:
                      description: |-
                        Amount specifies how much quota to claim for this resource type. Must be
                        measured in the BaseUnit defined by the corresponding ResourceRegistration.
                        Must be a positive integer (minimum value is 0, but 0 means no quota
                        requested).

                        For Entity registrations: Use 1 for single resource instances (1 Project, 1
                        User) For Allocation registrations: Use actual capacity amounts (2048 for
                        2048 MB, 1000 for 1000 millicores)

                        Examples:

                          - 1 (claiming 1 Project)
                          - 2048 (claiming 2048 bytes of storage)
                          - 1000 (claiming 1000 CPU millicores)
                      format: int64
                      minimum: 0
                      type: integer
                    resourceType:
                      description: |-
                        ResourceType identifies the specific resource type being claimed. Must
                        exactly match a ResourceRegistration.spec.resourceType that is currently
                        active. The quota system validates this reference during claim processing.

                        The format is defined by platform administrators when creating ResourceRegistrations.
                        Service providers can use any identifier that makes sense for their quota system usage.

                        Examples:

                          - "resourcemanager.miloapis.com/projects"
                          - "compute_cpu"
                          - "storage.volumes"
                          - "custom-service-quota"
                      type: string
                  required:
                  - amount
                  - resourceType
                  type: object
                maxItems: 20
                type: array
              resourceRef:
                description: |-
                  ResourceRef identifies the actual Kubernetes resource that triggered this
                  claim. ClaimCreationPolicy automatically populates this field during
                  admission. Uses unversioned reference (apiGroup + kind + name + namespace)
                  to remain valid across API version changes.

                  The referenced resource's kind must be listed in the ResourceRegistration's
                  spec.claimingResources for the claim to be valid.

                  Examples:

                    - Project resource triggering Project quota claim
                    - User resource triggering User quota claim
                    - Organization resource triggering storage quota claim
                properties:
                  apiGroup:
                    description: |-
                      APIGroup specifies the API group of the referenced resource.
                      Use full group name for Milo resources.

                      Examples:
                      - "resourcemanager.miloapis.com" (Project, Organization)
                      - "iam.miloapis.com" (User, Group)
                      - "infrastructure.miloapis.com" (infrastructure resources)
                    type: string
                  kind:
                    description: |-
                      Kind specifies the type of the referenced resource.
                      Must match an existing Kubernetes resource type.

                      Examples:
                      - "Project" (Project resource that triggered quota claim)
                      - "User" (User resource that triggered quota claim)
                      - "Organization" (Organization resource that triggered quota claim)
                    type: string
                  name:
                    description: |-
                      Name identifies the specific resource instance that triggered the quota claim.
                      Used for linking claims back to their triggering resources.

                      Examples:
                      - "web-app-project" (Project that triggered Project quota claim)
                      - "john.doe" (User that triggered User quota claim)
                    type: string
                  namespace:
                    description: |-
                      Namespace specifies the namespace containing the referenced resource.
                      Required for namespaced resources, omitted for cluster-scoped resources.

                      Examples:
                      - "acme-corp" (organization namespace containing Project)
                      - "team-alpha" (project namespace containing User)
                      - "" or omitted (for cluster-scoped resources like Organization)
                    type: string
                required:
                - kind
                - name
                type: object
            required:
            - consumerRef
            - requests
            - resourceRef
            type: object
          status:
            default:
              conditions:
              - lastTransitionTime: "1970-01-01T00:00:00Z"
                message: Awaiting capacity evaluation
                reason: PendingEvaluation
                status: "False"
                type: Granted
            description: |-
              ResourceClaimStatus reports the claim's processing state and allocation
              results. The system updates this status to communicate whether quota was
              granted and provide detailed allocation information for each requested
              resource type.
            properties:
              allocations:
                description: |-
                  Allocations provides detailed status for each resource request in the
                  claim. The system creates one allocation entry for each request in
                  spec.requests. Use this field to understand which specific requests were
                  granted or denied.

                  List is indexed by ResourceType for efficient lookups.
                items:
                  description: |-
                    ResourceClaimAllocationStatus tracks the allocation status for a specific resource
                    request within a claim. The system creates one allocation entry for each
                    request in the claim specification.
                  properties:
                    allocatedAmount:
                      description: |-
                        AllocatedAmount specifies how much quota was actually allocated for this
                        request. Measured in the BaseUnit defined by the ResourceRegistration.
                        Currently always equals the requested amount or 0 (partial allocations not
                        supported).

                        Set to the requested amount when Status=Granted, 0 when Status=Denied or
                        Pending.
                      format: int64
                      type: integer
                    allocatingBucket:
                      description: |-
                        AllocatingBucket identifies the AllowanceBucket that provided the quota for
                        this request. Set only when Status=Granted. Used for tracking and debugging
                        quota consumption.

                        Format: bucket name (generated as:
                        consumer-kind-consumer-name-resource-type-hash)
                      type: string
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime records when this allocation status last changed.
                        Updates whenever Status, Reason, or Message changes.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        Message provides a human-readable explanation of the allocation result.
                        Includes specific details about quota availability or validation errors.

                        Examples:

                          - "Allocated 1 project from bucket organization-acme-projects"
                          - "Insufficient quota: need 2048 bytes, only 1024 available"
                          - "ResourceRegistration not found for resourceType"
                      type: string
                    reason:
                      description: |-
                        Reason provides a machine-readable explanation for the current status.
                        Standard reasons include "QuotaAvailable", "QuotaExceeded",
                        "ValidationFailed".
                      type: string
                    resourceType:
                      description: |-
                        ResourceType identifies which resource request this allocation status
                        describes. Must exactly match one of the resourceType values in
                        spec.requests.
                      type: string
                    status:
                      description: |-
                        Status indicates the allocation result for this specific resource request.

                        Valid values:

                          - "Granted": Quota was available and the request was approved
                          - "Denied": Insufficient quota or validation failure prevented allocation
                          - "Pending": Request is being evaluated (initial state)
                      enum:
                      - Granted
                      - Denied
                      - Pending
                      type: string
                  required:
                  - lastTransitionTime
                  - resourceType
                  - status
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - resourceType
                x-kubernetes-list-type: map
              conditions:
                description: |-
                  Conditions represents the overall status of the claim evaluation.
                  Controllers set these conditions to provide a high-level view of claim
                  processing.

                  Standard condition types:

                    - "Granted": Indicates whether the claim was approved and quota allocated

                  Standard condition reasons for "Granted":

                    - "QuotaAvailable": All requested quota was available and allocated
                    - "QuotaExceeded": Insufficient quota prevented allocation (claim denied)
                    - "ValidationFailed": Configuration errors prevented evaluation (claim denied)
                    - "PendingEvaluation": Claim is still being processed (initial state)

                  Claim Lifecycle:

                    1. Created: Granted=False, reason=PendingEvaluation
                    2. Processed: Granted=True/False based on quota availability and validation
                    3. Updated: Granted condition changes only when allocation results change
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-validations:
                - message: Granted condition reason must be valid
                  rule: 'self.all(c, c.type == ''Granted'' ? c.reason in [''QuotaAvailable'',
                    ''QuotaExceeded'', ''ValidationFailed'', ''PendingEvaluation'']
                    : true)'
              observedGeneration:
                description: |-
                  ObservedGeneration indicates the most recent spec generation the system has
                  processed. When ObservedGeneration matches metadata.generation, the status
                  reflects the current spec. When ObservedGeneration is lower, the system is
                  still processing recent changes.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    selectableFields:
    - jsonPath: .spec.consumerRef.kind
    - jsonPath: .spec.consumerRef.name
    - jsonPath: .spec.resourceRef.apiGroup
    - jsonPath: .spec.resourceRef.kind
    - jsonPath: .spec.resourceRef.name
    - jsonPath: .spec.resourceRef.namespace
    served: true
    storage: true
    subresources:
      status: {}
