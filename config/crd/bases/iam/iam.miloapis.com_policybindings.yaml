---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: policybindings.iam.miloapis.com
spec:
  group: iam.miloapis.com
  names:
    kind: PolicyBinding
    listKind: PolicyBindingList
    plural: policybindings
    singular: policybinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.roleRef.name
      name: Role
      type: string
    - jsonPath: .spec.resourceSelector.resourceRef.kind
      name: Resource Kind
      type: string
    - jsonPath: .spec.resourceSelector.resourceRef.name
      name: Resource Name
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "PolicyBinding grants roles to users or groups on specific resources
          in the Milo IAM system.\nThis is the central resource that connects the
          three core IAM concepts: subjects (users/groups),\nroles (permission sets),
          and resources (the things being protected).\n\nPolicyBindings are the mechanism
          through which access control is actually enforced. They\nspecify which users
          or groups should receive which permissions (via roles) on which resources\nor
          resource types. This follows the \"who can do what on which resource\" model
          of access control.\n\nKey characteristics:\n- Namespaced: PolicyBindings
          exist within a specific namespace context\n- Immutable references: Role
          and resource references cannot be changed after creation\n- Flexible resource
          targeting: Can target specific resource instances or all resources of a
          type\n- Cross-namespace capability: Can reference roles from any namespace\n-
          Multiple subjects: Can grant the same role to multiple users/groups in a
          single binding\n\nResource targeting modes:\n1. Specific resource (resourceRef):
          Grants permissions on a single, specific resource instance\n2. Resource
          kind (resourceKind): Grants permissions on ALL resources of a particular
          type\n\nCommon usage patterns:\n- Project access: Grant team members access
          to all resources in a project\n- Resource-specific permissions: Grant access
          to individual workloads, databases, etc.\n- Administrative access: Grant
          admin roles on resource types for operational teams\n- Temporary access:
          Create time-limited bindings for contractor or temporary access\n\nBest
          practices:\n- Use groups as subjects rather than individual users for easier
          management\n- Prefer resource kind bindings for broad access, specific resource
          refs for targeted access\n- Use descriptive names that indicate the purpose
          of the binding\n- Regularly audit PolicyBindings to ensure appropriate access
          levels\n- Leverage the principle of least privilege when designing role
          assignments\n\nExample - Grant developers access to all workloads in a project:\n\n\tapiVersion:
          iam.miloapis.com/v1alpha1\n\tkind: PolicyBinding\n\tmetadata:\n\t  name:
          developers-workload-access\n\t  namespace: project-alpha\n\tspec:\n\t  roleRef:\n\t
          \   name: workload-developer\n\t    namespace: project-alpha\n\t  subjects:\n\t
          \ - kind: Group\n\t    name: developers\n\t  resourceSelector:\n\t    resourceKind:\n\t
          \     apiGroup: compute.miloapis.com\n\t      kind: Workload\n\nExample
          - Grant specific user access to a specific database:\n\n\tapiVersion: iam.miloapis.com/v1alpha1\n\tkind:
          PolicyBinding\n\tmetadata:\n\t  name: alice-prod-db-access\n\t  namespace:
          production\n\tspec:\n\t  roleRef:\n\t    name: database-admin\n\t  subjects:\n\t
          \ - kind: User\n\t    name: alice-smith\n\t    uid: user-123-abc\n\t  resourceSelector:\n\t
          \   resourceRef:\n\t      apiGroup: data.miloapis.com\n\t      kind: Database\n\t
          \     name: production-primary\n\t      uid: db-456-def\n\t      namespace:
          production\n\nRelated resources:\n- Role: Defines the permissions being
          granted\n- User/Group: The subjects receiving the permissions\n- Resource:
          The target resource(s) being protected\n\nPolicyBinding is the Schema for
          the policybindings API"
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              PolicyBindingSpec defines the desired state of PolicyBinding, specifying which
              subjects (users/groups) should receive which role on which resources.

              This spec contains three key components that together define the complete
              access control policy:
              1. RoleRef: The role being granted (defines the permissions)
              2. Subjects: Who is receiving the role (users and/or groups)
              3. ResourceSelector: What resources the role applies to (specific or by type)
            properties:
              resourceSelector:
                description: |-
                  ResourceSelector specifies which resources the role should be applied to.
                  This is an immutable field that cannot be changed after creation.

                  Exactly one of the following must be specified:
                  - resourceRef: Grants permissions on a specific resource instance
                  - resourceKind: Grants permissions on all resources of a specific type

                  Use resourceRef for targeted access to individual resources.
                  Use resourceKind for broad access across all resources of a type.

                  Examples:
                    # Grant access to all workloads
                    resourceSelector:
                      resourceKind:
                        apiGroup: compute.miloapis.com
                        kind: Workload

                    # Grant access to specific workload
                    resourceSelector:
                      resourceRef:
                        apiGroup: compute.miloapis.com
                        kind: Workload
                        name: my-workload
                        uid: workload-456-def
                properties:
                  resourceKind:
                    description: |-
                      ResourceKind specifies that the policy binding should apply to all resources of a specific kind.
                      Mutually exclusive with resourceRef.
                    properties:
                      apiGroup:
                        description: |-
                          APIGroup is the group for the resource type being referenced. If APIGroup
                          is not specified, the specified Kind must be in the core API group.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced.
                        type: string
                    required:
                    - kind
                    type: object
                  resourceRef:
                    description: |-
                      ResourceRef provides a reference to a specific resource instance.
                      Mutually exclusive with resourceKind.
                    properties:
                      apiGroup:
                        description: |-
                          APIGroup is the group for the resource being referenced.
                          If APIGroup is not specified, the specified Kind must be in the core API group.
                          For any other third-party types, APIGroup is required.
                        type: string
                      kind:
                        description: Kind is the type of resource being referenced.
                        type: string
                      name:
                        description: Name is the name of resource being referenced.
                        type: string
                      namespace:
                        description: |-
                          Namespace is the namespace of resource being referenced.
                          Required for namespace-scoped resources. Omitted for cluster-scoped resources.
                        type: string
                      uid:
                        description: UID is the unique identifier of the resource
                          being referenced.
                        type: string
                    required:
                    - kind
                    - name
                    - uid
                    type: object
                type: object
                x-kubernetes-validations:
                - message: ResourceSelector is immutable and cannot be changed after
                    creation
                  rule: oldSelf == null || self == oldSelf
                - message: exactly one of resourceRef or resourceKind must be specified,
                    but not both
                  rule: has(self.resourceRef) != has(self.resourceKind)
              roleRef:
                description: |-
                  RoleRef specifies the Role that should be granted to the subjects.
                  This is an immutable field that cannot be changed after the PolicyBinding
                  is created - to change the role, you must delete and recreate the binding.

                  The role can exist in any namespace, enabling cross-namespace role sharing.
                  If no namespace is specified, it defaults to the PolicyBinding's namespace.

                  Example:
                    roleRef:
                      name: workload-developer
                      namespace: shared-roles  # optional, defaults to current namespace
                properties:
                  name:
                    description: Name is the name of resource being referenced
                    type: string
                  namespace:
                    description: Namespace of the referenced Role. If empty, it is
                      assumed to be in the PolicyBinding's namespace.
                    type: string
                required:
                - name
                type: object
                x-kubernetes-validations:
                - message: RoleRef is immutable and cannot be changed after creation
                  rule: oldSelf == null || self == oldSelf
              subjects:
                description: |-
                  Subjects specifies the users and/or groups that should receive the role.
                  Multiple subjects can be listed to grant the same role to multiple entities
                  in a single PolicyBinding.

                  Each subject must specify:
                  - kind: Either "User" or "Group"
                  - name: The name of the user or group
                  - uid: The unique identifier (required for users, optional for system groups)

                  Special group "system:authenticated-users" can be used to grant access
                  to all authenticated users in the system.

                  Examples:
                    subjects:
                    - kind: User
                      name: alice-smith
                      uid: user-123-abc
                    - kind: Group
                      name: developers
                    - kind: Group
                      name: system:authenticated-users  # special system group
                items:
                  description: |-
                    Subject contains a reference to the object or user identities a role binding applies to.
                    This can be a User or Group.
                  properties:
                    kind:
                      description: Kind of object being referenced. Values defined
                        in Kind constants.
                      enum:
                      - User
                      - Group
                      type: string
                    name:
                      description: |-
                        Name of the object being referenced. A special group name of
                        "system:authenticated-users" can be used to refer to all authenticated
                        users.
                      type: string
                    namespace:
                      description: |-
                        Namespace of the referenced object. If DNE, then for an SA it refers to the PolicyBinding resource's namespace.
                        For a User or Group, it is ignored.
                      type: string
                    uid:
                      description: UID of the referenced object. Optional for system
                        groups (groups with names starting with "system:").
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                  x-kubernetes-validations:
                  - message: UID is required for all subjects except system groups
                      (groups with names starting with 'system:')
                    rule: (self.kind == 'Group' && has(self.name) && self.name.startsWith('system:'))
                      || (has(self.uid) && size(self.uid) > 0)
                minItems: 1
                type: array
            required:
            - resourceSelector
            - roleRef
            - subjects
            type: object
          status:
            description: |-
              PolicyBindingStatus defines the observed state of PolicyBinding, indicating
              whether the access control policy has been successfully applied and is active.
            properties:
              conditions:
                default:
                - lastTransitionTime: "1970-01-01T00:00:00Z"
                  message: Waiting for control plane to reconcile
                  reason: Unknown
                  status: Unknown
                  type: Ready
                description: |-
                  Conditions provide detailed status information about the PolicyBinding resource.
                  The primary condition type is "Ready" which indicates whether the policy
                  binding has been successfully applied and is actively enforcing access control.

                  Common condition types:
                  - Ready: Indicates the policy binding is active and enforcing access
                  - RoleFound: Indicates the referenced role exists and is valid
                  - SubjectsValid: Indicates all referenced subjects (users/groups) exist
                  - ResourceValid: Indicates the target resource or resource type is valid

                  Example condition:
                    - type: Ready
                      status: "True"
                      reason: PolicyActive
                      message: Policy binding successfully applied and enforcing access
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: |-
                  ObservedGeneration represents the most recent generation that has been
                  observed and processed by the PolicyBinding controller. This is used to
                  track whether the controller has processed the latest changes to the spec.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
