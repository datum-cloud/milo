---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: groupmemberships.iam.miloapis.com
spec:
  group: iam.miloapis.com
  names:
    kind: GroupMembership
    listKind: GroupMembershipList
    plural: groupmemberships
    singular: groupmembership
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.userRef.name
      name: User
      type: string
    - jsonPath: .spec.groupRef.name
      name: Group
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "GroupMembership establishes a relationship between a User and
          a Group in the Milo IAM system.\nThis resource is the primary mechanism
          for adding users to groups, enabling organized\npermission management through
          group-based role assignments.\n\nGroupMembership resources are namespaced
          and should typically be created in the same\nnamespace as the target group.
          Each GroupMembership represents a single user-to-group\nrelationship - to
          add multiple users to a group, create multiple GroupMembership resources.\n\nKey
          characteristics:\n- Namespaced: Created in the same namespace as the target
          group\n- One-to-one relationship: Each resource links exactly one user to
          one group\n- Cross-namespace references: Can reference cluster-scoped users
          from any namespace\n- Bidirectional effect: Affects both user's group memberships
          and group's member list\n\nCommon usage patterns:\n- Team onboarding: Add
          new team members to appropriate groups\n- Role changes: Move users between
          groups as their responsibilities change\n- Project assignments: Add users
          to project-specific groups\n- Temporary access: Grant temporary group membership
          for specific tasks\n\nBest practices:\n- Use descriptive names that indicate
          the user-group relationship\n- Create memberships in the same namespace
          as the target group\n- Monitor membership status through conditions before
          relying on permissions\n- Use groups rather than direct user-role bindings
          for scalability\n\nExample:\n\n\tapiVersion: iam.miloapis.com/v1alpha1\n\tkind:
          GroupMembership\n\tmetadata:\n\t  name: jane-doe-developers\n\t  namespace:
          project-alpha\n\tspec:\n\t  userRef:\n\t    name: jane-doe\n\t  groupRef:\n\t
          \   name: developers\n\t    namespace: project-alpha\n\nRelated resources:\n-
          User: The cluster-scoped user being added to the group\n- Group: The namespaced
          group that will contain the user\n- PolicyBinding: Can reference the group
          to grant roles to all members\n\nGroupMembership is the Schema for the groupmemberships
          API"
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              GroupMembershipSpec defines the desired state of GroupMembership, establishing
              the relationship between a specific user and a group within the IAM system.
            properties:
              groupRef:
                description: |-
                  GroupRef is a reference to the Group that the user should be added to.
                  Groups are namespaced resources, so both name and namespace are required.
                  The referenced group must exist in the specified namespace before the
                  GroupMembership can be successfully reconciled.

                  Example: { name: "developers", namespace: "project-alpha" }
                properties:
                  name:
                    description: |-
                      Name is the name of the Group being referenced. This must match the metadata.name
                      of an existing Group resource in the specified namespace.

                      Example: "developers"
                    type: string
                  namespace:
                    description: |-
                      Namespace is the namespace where the referenced Group exists. This must match
                      the metadata.namespace of an existing Group resource.

                      Example: "project-alpha"
                    type: string
                required:
                - name
                - namespace
                type: object
              userRef:
                description: |-
                  UserRef is a reference to the User that should be a member of the specified Group.
                  Users are cluster-scoped resources, so only the name is required for identification.
                  The referenced user must exist in the cluster before the GroupMembership can be
                  successfully reconciled.

                  Example: { name: "jane-doe" }
                properties:
                  name:
                    description: |-
                      Name is the name of the User being referenced. This must match the metadata.name
                      of an existing User resource in the cluster.

                      Example: "jane-doe"
                    type: string
                required:
                - name
                type: object
            required:
            - groupRef
            - userRef
            type: object
          status:
            description: |-
              GroupMembershipStatus defines the observed state of GroupMembership, indicating
              whether the user has been successfully added to the group.
            properties:
              conditions:
                description: |-
                  Conditions represent the latest available observations of the GroupMembership's current state.
                  The primary condition type is "Ready" which indicates whether the user has been
                  successfully added to the group and the membership is active.

                  Common condition types:
                  - Ready: Indicates the user is successfully a member of the group
                  - UserFound: Indicates the referenced user exists
                  - GroupFound: Indicates the referenced group exists

                  Example condition:
                    - type: Ready
                      status: "True"
                      reason: MembershipActive
                      message: User successfully added to group
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
