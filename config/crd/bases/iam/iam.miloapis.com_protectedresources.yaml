---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: protectedresources.iam.miloapis.com
spec:
  group: iam.miloapis.com
  names:
    kind: ProtectedResource
    listKind: ProtectedResourceList
    plural: protectedresources
    singular: protectedresource
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.kind
      name: Kind
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "ProtectedResource registers a resource type with the Milo IAM
          system, making it available\nfor access control through roles and policy
          bindings. This is a cluster-scoped resource\nthat defines which resource
          types can be protected by the IAM system and what permissions\nare available
          for those resources.\n\nProtectedResources serve as the registry that makes
          the IAM system aware of different\nresource types that exist in the platform.
          By registering a resource type, system\nadministrators define the complete
          set of permissions that can be granted on instances\nof that resource type,
          enabling fine-grained access control.\n\nKey characteristics:\n- Cluster-scoped:
          ProtectedResources exist globally across the control plane\n- Administrator-managed:
          Typically created by system administrators, not end users\n- Permission
          registry: Defines all possible permissions for a resource type\n- Hierarchy
          support: Can specify parent resources to enable permission inheritance\n-
          Service integration: Links resources to their owning services for organization\n\nPermission
          inheritance through parent resources:\nWhen parent resources are specified,
          permissions can be granted at higher levels\nin the resource hierarchy and
          automatically apply to child resources. For example,\ngranting permissions
          on an Organization can automatically apply to all Projects\nwithin that
          organization.\n\nCommon usage patterns:\n- New service integration: Register
          resource types when adding new services to Milo\n- Permission modeling:
          Define the complete permission set for each resource type\n- Hierarchy establishment:
          Set up parent-child relationships between resource types\n- Access control
          preparation: Make resources available for PolicyBinding targeting\n\nBest
          practices:\n- Use consistent permission naming across similar resource types\n-
          Define comprehensive permission sets that cover all necessary operations\n-
          Establish clear parent-child relationships for logical permission inheritance\n-
          Link resources to appropriate services for proper organization\n- Document
          permission semantics for developers and administrators\n\nExample - Register
          a Workload resource type:\n\n\tapiVersion: iam.miloapis.com/v1alpha1\n\tkind:
          ProtectedResource\n\tmetadata:\n\t  name: workloads\n\tspec:\n\t  serviceRef:\n\t
          \   name: compute.datumapis.com\n\t  kind: Workload\n\t  singular: workload\n\t
          \ plural: workloads\n\t  permissions:\n\t  - \"compute.datumapis.com/workloads.create\"\n\t
          \ - \"compute.datumapis.com/workloads.get\"\n\t  - \"compute.datumapis.com/workloads.update\"\n\t
          \ - \"compute.datumapis.com/workloads.delete\"\n\t  - \"compute.datumapis.com/workloads.list\"\n\t
          \ - \"compute.datumapis.com/workloads.scale\"\n\t  parentResources:\n\t
          \ - apiGroup: resourcemanager.miloapis.com\n\t    kind: Project\n\nExample
          - Register a Database resource with organization-level inheritance:\n\n\tapiVersion:
          iam.miloapis.com/v1alpha1\n\tkind: ProtectedResource\n\tmetadata:\n\t  name:
          databases\n\tspec:\n\t  serviceRef:\n\t    name: sql.datumapis.com\n\t  kind:
          Database\n\t  singular: database\n\t  plural: databases\n\t  permissions:\n\t
          \ - \"sql.datumapis.com/databases.create\"\n\t  - \"sql.datumapis.com/databases.read\"\n\t
          \ - \"sql.datumapis.com/databases.update\"\n\t  - \"sql.datumapis.com/databases.delete\"\n\t
          \ - \"sql.datumapis.com/databases.backup\"\n\t  - \"sql.datumapis.com/databases.restore\"\n\t
          \ parentResources:\n\t  - apiGroup: resourcemanager.miloapis.com\n\t    kind:
          Project\n\nRelated resources:\n- Role: Can include permissions defined in
          ProtectedResource\n- PolicyBinding: Can target resource types registered
          as ProtectedResource\n\nProtectedResource is the Schema for the protectedresources
          API"
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              ProtectedResourceSpec defines the desired state of ProtectedResource, specifying
              how a resource type should be registered with the IAM system and what permissions
              are available for instances of that resource type.
            properties:
              kind:
                description: |-
                  Kind specifies the Kubernetes-style kind name for this resource type.
                  This should match the kind field used in the actual resource definitions
                  and follow PascalCase naming conventions.

                  Examples: "Workload", "Database", "StorageBucket"
                type: string
              parentResources:
                description: |-
                  ParentResources defines the resource types that can serve as parents to
                  this resource type in the permission hierarchy. When permissions are
                  granted on a parent resource, they can be inherited by child resources.

                  This enables powerful permission models where, for example, granting
                  permissions on an Organization automatically applies to all Projects
                  within that organization, and all resources within those projects.

                  Each parent resource reference must specify the apiGroup and kind of
                  the parent resource type. The parent resource types must also be
                  registered as ProtectedResources for the inheritance to work properly.

                  Example hierarchy: Project -> Workload
                    parentResources:
                    - apiGroup: resourcemanager.miloapis.com
                      kind: Project
                items:
                  description: ParentResourceRef defines the reference to a parent
                    resource
                  properties:
                    apiGroup:
                      description: |-
                        APIGroup is the group for the resource being referenced.
                        If APIGroup is not specified, the specified Kind must be in the core API group.
                        For any other third-party types, APIGroup is required.
                      type: string
                    kind:
                      description: Kind is the type of resource being referenced.
                      type: string
                  required:
                  - kind
                  type: object
                type: array
              permissions:
                description: |-
                  Permissions defines the complete set of permissions that can be granted
                  on instances of this resource type. Each permission should follow the
                  standard format: {service}/{resource}.{action}

                  These permissions become available for use in Role definitions and
                  determine what actions users can perform on resources of this type
                  when granted appropriate roles through PolicyBindings.

                  Common permission patterns:
                  - CRUD operations: create, read, update, delete
                  - Listing operations: list
                  - Administrative operations: admin, manage
                  - Resource-specific operations: scale, backup, restore, etc.

                  Examples:
                    permissions:
                    - "compute.datumapis.com/workloads.create"
                    - "compute.datumapis.com/workloads.get"
                    - "compute.datumapis.com/workloads.update"
                    - "compute.datumapis.com/workloads.delete"
                    - "compute.datumapis.com/workloads.list"
                    - "compute.datumapis.com/workloads.scale"
                    - "compute.datumapis.com/workloads.logs"
                items:
                  type: string
                type: array
              plural:
                description: |-
                  Plural specifies the plural form of the resource name, used in API paths
                  and resource listings. This should follow camelCase naming conventions
                  and be the lowercase, plural version of the Kind.

                  Examples: "workloads", "databases", "storageBuckets"
                type: string
              serviceRef:
                description: |-
                  ServiceRef identifies the service that owns this protected resource type.
                  This creates a logical grouping of related resource types under their
                  owning service, helping with organization and management. The service name
                  should be the API group of the service.

                  Example:
                    serviceRef:
                      name: compute.datumapis.com
                properties:
                  name:
                    description: Name is the resource name of the service definition.
                    type: string
                required:
                - name
                type: object
              singular:
                description: |-
                  Singular specifies the singular form of the resource name, used in API
                  paths and CLI commands. This should follow camelCase naming conventions
                  and be the lowercase, singular version of the Kind.

                  Examples: "workload", "database", "storageBucket"
                type: string
            required:
            - kind
            - permissions
            - plural
            - serviceRef
            - singular
            type: object
          status:
            description: |-
              ProtectedResourceStatus defines the observed state of ProtectedResource, indicating
              whether the resource type has been successfully registered with the IAM system.
            properties:
              conditions:
                default:
                - lastTransitionTime: "1970-01-01T00:00:00Z"
                  message: Waiting for control plane to reconcile
                  reason: Unknown
                  status: Unknown
                  type: Ready
                description: |-
                  Conditions provide detailed status information about the ProtectedResource registration.
                  The primary condition type is "Ready" which indicates whether the resource type
                  has been successfully registered and is available for use in the IAM system.

                  Common condition types:
                  - Ready: Indicates the resource type is registered and available for protection
                  - ServiceValid: Indicates the referenced service exists
                  - PermissionsValid: Indicates all specified permissions follow the correct format
                  - ParentResourcesValid: Indicates all parent resource references are valid

                  Example condition:
                    - type: Ready
                      status: "True"
                      reason: ResourceRegistered
                      message: Resource type successfully registered with IAM system
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: |-
                  ObservedGeneration represents the most recent generation that has been
                  observed and processed by the ProtectedResource controller. This corresponds
                  to the resource's metadata.generation and is used to track whether the
                  controller has processed the latest changes to the spec.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
