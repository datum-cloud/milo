---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: roles.iam.miloapis.com
spec:
  group: iam.miloapis.com
  names:
    kind: Role
    listKind: RoleList
    plural: roles
    singular: role
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.displayName
      name: Display Name
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .spec.launchStage
      name: Launch Stage
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "Role defines a collection of permissions that can be granted
          to users or groups in the Milo IAM system.\nRoles are namespaced resources
          that serve as the primary mechanism for defining and organizing\npermissions
          within the access control framework.\n\nRoles can contain two types of permissions:\n1.
          Direct permissions: Explicit permissions listed in the includedPermissions
          field\n2. Inherited permissions: Permissions from other roles specified
          in inheritedRoles\n\nThe system includes predefined roles that are automatically
          available, and administrators\ncan create custom roles tailored to specific
          needs. Roles support inheritance, allowing\nfor hierarchical permission
          structures where complex roles can be built from simpler ones.\n\nKey characteristics:\n-
          Namespaced: Roles exist within a specific namespace/project context\n- Permission
          collections: Define sets of permissions using the format {service}/{resource}.{action}\n-
          Inheritance support: Can inherit permissions from other roles with no depth
          limit\n- Launch stage tracking: Indicates the stability level of the role
          (Early Access, Alpha, Beta, Stable, Deprecated)\n- PolicyBinding target:
          Referenced by PolicyBindings to grant permissions to users/groups\n\nPermission
          format:\nAll permissions follow the format: {service}/{resource}.{action}\nExamples:\n-
          \"compute.datumapis.com/workloads.create\" - Create workloads in the compute
          service\n- \"iam.miloapis.com/users.get\" - Get user information in the
          IAM service\n- \"storage.miloapis.com/buckets.delete\" - Delete storage
          buckets\n\nCommon usage patterns:\n- Predefined system roles: Use built-in
          roles for common access patterns\n- Custom business roles: Create roles
          that match organizational responsibilities\n- Hierarchical permissions:
          Use inheritance to build complex roles from simple ones\n- Environment-specific
          roles: Create different roles for dev, staging, production\n\nBest practices:\n-
          Follow principle of least privilege when defining permissions\n- Use descriptive
          names that clearly indicate the role's purpose\n- Leverage inheritance to
          avoid permission duplication\n- Set appropriate launch stages to indicate
          role stability\n- Group related permissions logically within roles\n\nExample
          - Basic role with direct permissions:\n\n\tapiVersion: iam.miloapis.com/v1alpha1\n\tkind:
          Role\n\tmetadata:\n\t  name: workload-viewer\n\t  namespace: project-alpha\n\tspec:\n\t
          \ launchStage: Stable\n\t  includedPermissions:\n\t  - \"compute.datumapis.com/workloads.read\"\n\t
          \ - \"compute.datumapis.com/workloads.list\"\n\nExample - Role with inheritance:\n\n\tapiVersion:
          iam.miloapis.com/v1alpha1\n\tkind: Role\n\tmetadata:\n\t  name: workload-admin\n\t
          \ namespace: project-alpha\n\tspec:\n\t  launchStage: Stable\n\t  includedPermissions:\n\t
          \ - \"compute.datumapis.com/workloads.create\"\n\t  - \"compute.datumapis.com/workloads.delete\"\n\t
          \ inheritedRoles:\n\t  - name: workload-viewer\n\t    namespace: project-alpha\n\nRelated
          resources:\n- PolicyBinding: Binds this role to users/groups on specific
          resources\n- ProtectedResource: Defines the permissions that can be included
          in roles\n\nRole is the Schema for the roles API"
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              RoleSpec defines the desired state of Role, specifying the permissions and inheritance
              configuration that determines what actions users with this role can perform.
            properties:
              includedPermissions:
                description: |-
                  IncludedPermissions defines the explicit permissions that this role grants.
                  Each permission must follow the format: {service}/{resource}.{action}

                  Examples:
                  - "compute.datumapis.com/workloads.create" - Permission to create workloads
                  - "iam.miloapis.com/users.get" - Permission to read user information
                  - "storage.miloapis.com/buckets.delete" - Permission to delete storage buckets

                  These permissions are in addition to any permissions inherited from other roles
                  specified in the inheritedRoles field.
                items:
                  type: string
                type: array
              inheritedRoles:
                description: |-
                  InheritedRoles specifies other roles from which this role should inherit permissions.
                  This enables building complex roles from simpler ones and promotes reusability
                  of common permission sets.

                  There is no limit to inheritance depth - roles can inherit from roles that
                  themselves inherit from other roles. The system will resolve the complete
                  permission set by following the inheritance chain.

                  Each inherited role must exist in the same namespace as this role, or specify
                  a different namespace explicitly. If namespace is omitted, it defaults to
                  the current role's namespace.

                  Example:
                    inheritedRoles:
                    - name: base-viewer  # inherits from base-viewer in same namespace
                    - name: admin-tools
                      namespace: milo-system  # inherits from admin-tools in milo-system namespace
                items:
                  description: |-
                    ScopedRoleReference defines a reference to another Role, scoped by namespace.
                    This is used for role inheritance where one role needs to reference another
                    role to inherit its permissions. The reference includes both name and optional
                    namespace for cross-namespace role inheritance.

                    Example usage in role inheritance:
                      inheritedRoles:
                      - name: viewer-role        # references viewer-role in same namespace
                      - name: admin-base
                        namespace: system        # references admin-base in system namespace
                  properties:
                    name:
                      description: |-
                        Name of the referenced Role. This must match the metadata.name of an
                        existing Role resource that contains the permissions to be inherited.

                        Example: "workload-viewer"
                      type: string
                    namespace:
                      description: |-
                        Namespace of the referenced Role. If not specified, it defaults to the
                        namespace of the resource containing this reference, enabling same-namespace
                        role inheritance without explicit namespace specification.

                        For cross-namespace inheritance, this field must be explicitly set to
                        the namespace containing the target role.

                        Example: "system" (for system-wide roles) or "shared-roles"
                      type: string
                  required:
                  - name
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - name
                x-kubernetes-list-type: map
              launchStage:
                description: |-
                  LaunchStage indicates the stability and maturity level of this IAM role.
                  This helps users understand whether the role is stable for production use
                  or still in development.

                  Valid values:
                  - "Early Access": New role with limited availability, subject to breaking changes
                  - "Alpha": Experimental role that may change significantly
                  - "Beta": Pre-release role that is feature-complete but may have minor changes
                  - "Stable": Production-ready role with backwards compatibility guarantees
                  - "Deprecated": Role scheduled for removal, use alternatives when possible
                type: string
            required:
            - launchStage
            type: object
          status:
            default:
              conditions:
              - lastTransitionTime: "1970-01-01T00:00:00Z"
                message: Waiting for control plane to reconcile
                reason: Unknown
                status: Unknown
                type: Ready
            description: |-
              RoleStatus defines the observed state of Role, indicating the current status
              of the role's validation, inheritance resolution, and overall readiness.
            properties:
              conditions:
                description: |-
                  Conditions provide detailed status information about the Role resource.
                  The primary condition type is "Ready" which indicates whether the role
                  has been successfully validated and is ready for use in PolicyBindings.

                  Common condition types:
                  - Ready: Indicates the role is validated and ready for use
                  - PermissionsValid: Indicates all specified permissions are valid
                  - InheritanceResolved: Indicates inherited roles have been successfully resolved

                  Example condition:
                    - type: Ready
                      status: "True"
                      reason: RoleReady
                      message: Role successfully validated and ready for use
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: |-
                  ObservedGeneration represents the most recent generation that has been
                  observed and processed by the role controller. This is used to track
                  whether the controller has processed the latest changes to the role spec.
                format: int64
                type: integer
              parent:
                description: |-
                  Parent indicates the resource name of the parent under which this role was created.
                  This field is typically used for system roles that are automatically created
                  as part of resource provisioning or service initialization.

                  Example: "projects/my-project" or "organizations/my-org"
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
