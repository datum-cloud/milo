---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: groups.iam.miloapis.com
spec:
  group: iam.miloapis.com
  names:
    kind: Group
    listKind: GroupList
    plural: groups
    singular: group
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "Group represents a collection of users for simplified permission
          management in the Milo IAM system.\nGroups are namespaced resources that
          serve as containers for organizing users with similar access needs.\n\nGroups
          themselves have no configuration options - they exist purely as organizational
          units.\nUsers are added to groups through GroupMembership resources, which
          create the actual relationship\nbetween users and groups. Groups cannot
          be nested within other groups in the current implementation,\nthough this
          may be supported in future versions.\n\nKey characteristics:\n- Namespaced:
          Groups exist within a specific namespace/project context\n- User organization:
          Primary purpose is to organize users for easier permission management\n-
          No direct configuration: Groups have no spec fields, only metadata and status\n-
          PolicyBinding target: Groups can be referenced in PolicyBindings to grant
          roles to all members\n\nCommon usage patterns:\n- Team organization (e.g.,
          \"developers\", \"qa-team\", \"project-managers\")\n- Role-based groupings
          (e.g., \"admins\", \"viewers\", \"editors\")\n- Department-based access
          (e.g., \"engineering\", \"marketing\", \"finance\")\n- Project-specific
          teams (e.g., \"project-alpha-team\", \"infrastructure-team\")\n\nBest practices:\n-
          Use descriptive names that clearly indicate the group's purpose\n- Organize
          groups by function or team rather than individual permissions\n- Bind roles
          to groups rather than individual users for easier management\n- Use groups
          consistently across projects for similar roles\n\nExample:\n\n\tapiVersion:
          iam.miloapis.com/v1alpha1\n\tkind: Group\n\tmetadata:\n\t  name: developers\n\t
          \ namespace: project-alpha\n\t  annotations:\n\t    description: \"Developers
          working on project alpha with read/write access\"\n\nRelated resources:\n-
          GroupMembership: Links users to this group\n- PolicyBinding: Can reference
          this group as a subject for role assignments\n\nGroup is the Schema for
          the groups API"
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          status:
            description: |-
              GroupStatus defines the observed state of Group, tracking the readiness and
              synchronization status of the group resource.
            properties:
              conditions:
                description: |-
                  Conditions represent the latest available observations of a group's current state.
                  The primary condition type is "Ready" which indicates whether the group
                  is properly initialized and ready for use in the IAM system.

                  Common condition types:
                  - Ready: Indicates the group is available for membership operations

                  Example condition:
                    - type: Ready
                      status: "True"
                      reason: GroupReady
                      message: Group successfully created and ready for members
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
