apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: organization-membership-role-backfill
spec:
  description: |
    Tests the organization membership migration controller that backfills roles
    from existing PolicyBindings.

    This test verifies:
    - OrganizationMemberships without roles are discovered
    - Legacy PolicyBindings are correctly identified
    - Roles are extracted and added to OrganizationMembership.spec.roles
    - OrganizationMembership controller creates new managed PolicyBindings
    - Legacy PolicyBindings are cleaned up after migration
    - Users retain access throughout the migration process

  steps:
  - name: setup-test-resources
    description: Create Organization, User, Roles, and OrganizationMembership without roles
    try:
    - apply:
        file: resources/01-organization.yaml
        outputs:
          - name: testOrg
            value: (@)
    - wait:
        apiVersion: resourcemanager.miloapis.com/v1alpha1
        kind: Organization
        name: migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'

    - apply:
        file: resources/02-user.yaml
        outputs:
          - name: testUser
            value: (@)
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: User
        name: migration-test-user
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'

    - apply:
        file: resources/03-roles.yaml
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: Role
        name: organization-owner
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: Role
        name: organization-viewer
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'

  - name: create-legacy-setup
    description: Create OrganizationMembership without roles and legacy PolicyBindings
    try:
    # Create OrganizationMembership without roles (pre-migration state)
    - apply:
        file: resources/04-membership-without-roles.yaml
        outputs:
          - name: membership
            value: (@)
    - wait:
        apiVersion: resourcemanager.miloapis.com/v1alpha1
        kind: OrganizationMembership
        name: migration-test-membership
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'
    - assert:
        file: assertions/membership-no-roles.yaml

    # Create legacy PolicyBindings (pre-migration state)
    - apply:
        file: resources/05-legacy-policy-bindings.yaml
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: PolicyBinding
        name: legacy-owner-binding
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: PolicyBinding
        name: legacy-viewer-binding
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: Ready
            value: 'true'
    - assert:
        file: assertions/legacy-bindings-exist.yaml

  - name: verify-pre-migration-state
    description: Verify the pre-migration state is correct
    try:
    - assert:
        file: assertions/membership-no-roles.yaml
    - assert:
        file: assertions/legacy-bindings-exist.yaml
    - script:
        content: |
          echo "Pre-migration state verified:"
          echo "- OrganizationMembership exists without roles"
          echo "- Legacy PolicyBindings exist"

  - name: run-migration-controller
    description: Simulate migration controller discovering and updating membership
    try:
    # The migration controller would normally run automatically, but for testing
    # we'll simulate its behavior by patching the OrganizationMembership with roles
    - patch:
        resource:
          apiVersion: resourcemanager.miloapis.com/v1alpha1
          kind: OrganizationMembership
          metadata:
            name: migration-test-membership
            namespace: organization-migration-test-org
          spec:
            roles:
            - name: organization-owner
              namespace: organization-migration-test-org
            - name: organization-viewer
              namespace: organization-migration-test-org

    # Wait for OrganizationMembership controller to reconcile and create managed PolicyBindings
    - wait:
        apiVersion: resourcemanager.miloapis.com/v1alpha1
        kind: OrganizationMembership
        name: migration-test-membership
        namespace: organization-migration-test-org
        timeout: 2m
        for:
          condition:
            name: RolesApplied
            value: 'true'

    # Verify managed PolicyBindings were created
    - assert:
        file: assertions/managed-bindings-created.yaml

    - script:
        content: |
          echo "Migration controller simulation complete:"
          echo "- OrganizationMembership updated with roles"
          echo "- Managed PolicyBindings created"

  - name: cleanup-legacy-bindings
    description: Simulate cleanup controller removing legacy PolicyBindings
    try:
    # Verify both legacy and managed PolicyBindings exist (transition state)
    - assert:
        file: assertions/transition-state.yaml

    # Simulate cleanup controller deleting legacy bindings
    - delete:
        ref:
          apiVersion: iam.miloapis.com/v1alpha1
          kind: PolicyBinding
          name: legacy-owner-binding
          namespace: organization-migration-test-org
    - delete:
        ref:
          apiVersion: iam.miloapis.com/v1alpha1
          kind: PolicyBinding
          name: legacy-viewer-binding
          namespace: organization-migration-test-org

    # Wait for legacy bindings to be deleted
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: PolicyBinding
        name: legacy-owner-binding
        namespace: organization-migration-test-org
        timeout: 1m
        for:
          deletion: {}
    - wait:
        apiVersion: iam.miloapis.com/v1alpha1
        kind: PolicyBinding
        name: legacy-viewer-binding
        namespace: organization-migration-test-org
        timeout: 1m
        for:
          deletion: {}

    - script:
        content: |
          echo "Legacy binding cleanup complete:"
          echo "- Legacy PolicyBindings deleted"
          echo "- Only managed PolicyBindings remain"

  - name: verify-post-migration-state
    description: Verify the final state after migration
    try:
    # Verify OrganizationMembership has roles
    - assert:
        file: assertions/membership-with-roles.yaml

    # Verify managed PolicyBindings exist
    - assert:
        file: assertions/managed-bindings-exist.yaml

    # Verify legacy PolicyBindings are gone
    - script:
        content: |
          # Check that legacy bindings no longer exist
          kubectl get policybinding legacy-owner-binding -n organization-migration-test-org 2>&1 | grep -q "NotFound" || exit 1
          kubectl get policybinding legacy-viewer-binding -n organization-migration-test-org 2>&1 | grep -q "NotFound" || exit 1
          echo "Verified: Legacy PolicyBindings no longer exist"

    - script:
        content: |
          echo "Post-migration state verified:"
          echo "- OrganizationMembership has roles in spec"
          echo "- Managed PolicyBindings exist"
          echo "- Legacy PolicyBindings deleted"
          echo "- Migration successful!"
